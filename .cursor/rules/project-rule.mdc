---
alwaysApply: true
---

# 📋 Mercatus Development Workflow & Guidelines

## Table of Contents
1. [🎯 Core Development Workflow](#core-development-workflow)
2. [🤖 AI Assistant Behavior Guidelines](#ai-assistant-behavior-guidelines) 
3. [🔧 Technology Stack](#technology-stack)
4. [⚡ Performance & Optimization](#performance--optimization)
5. [🛡️ Security Considerations](#security-considerations)
6. [🚀 Deployment & Operations](#deployment--operations)
7. [📚 Documentation Maintenance](#documentation-maintenance)

---

## 🎯 Core Development Workflow

### 📖 **CRITICAL: Document-First Development Process**

**The PRD.md file is the master product design document and MUST be the starting point for ALL development work.**

#### Mandatory Workflow Sequence:
1. **📋 Read PRD.md** - **ALWAYS** read this file first to understand product requirements
2. **📝 Update PRD.md** - If modifying/adding/removing features, update PRD.md FIRST
3. **📄 Update Planning Documents** - Then update both:
   - `web/documents/PLANNING.md`
   - `backend/documents/PLANNING.md`
4. **💻 Implementation** - Write code following project standards
5. **📋 Update Task Files** - Finally update both:
   - `web/documents/TASK.md`
   - `backend/documents/TASK.md`

### 📋 Standard Development Workflow

1. **📖 Read Documentation** - **MANDATORY** - Read PRD.md and both PLANNING.md files
2. **🔍 Understand Requirements** - Analyze task requirements in context of product goals
3. **📐 Plan Implementation** - Design technical solutions aligned with architecture
4. **💻 Code Implementation** - Follow project standards and best practices
5. **🧪 Test Verification** - Ensure functionality works correctly
6. **📝 Update Documentation** - Update task files with progress and decisions

---

## 🤖 AI Assistant Behavior Guidelines

### 🔧 Development Assistant Rules

- **📖 Mandatory Documentation Reading** - **ALWAYS** start by reading PRD.md, then both PLANNING.md files before any work
- **🧠 Context Awareness** - Always read relevant documentation first to understand project status
- **❓ No Assumptions** - Ask questions when uncertain, don't fabricate APIs or libraries
- **📂 File Path Confirmation** - Verify file paths exist before referencing them
- **🔄 Incremental Development** - Don't delete or overwrite existing code unless explicitly requested
- **📋 Autonomous Task Management** - **MUST** autonomously update task files based on work performed:
  - Mark completed tasks immediately
  - Add newly discovered tasks or requirements
  - Document technical decisions and blockers
  - Track dependencies and optimization opportunities

---

## 🔧 Technology Stack

### **Current Project Tech Stack**
- **Backend**: FastAPI + SQLAlchemy + PostgreSQL + Redis
- **Frontend**: Next.js + TypeScript + Tailwind CSS + SWR
- **Authentication**: Google OAuth + JWT
- **Testing**: pytest + Jest + React Testing Library

### **Dependency Management**
- **Python**: Specify versions in requirements.txt
- **Node.js**: Lock versions in package.json
- **Policy**: Evaluate necessity before adding new dependencies

---

## ⚡ Performance & Optimization

### 🚀 Backend Performance

#### Database Optimization
- Proper index usage
- Query optimization and pagination
- Connection pool configuration
- Read-write separation strategy

#### Caching Strategy
- Redis hot data caching
- Application layer caching
- CDN static resource caching

### 🎯 Frontend Performance

#### Code Splitting
```typescript
// Route-level code splitting
const TasksPage = dynamic(() => import('@/app/tasks/page'), {
  loading: () => <Loading />,
});

// Component-level lazy loading
const HeavyChart = lazy(() => import('@/components/HeavyChart'));
```

#### Resource Optimization
- Image lazy loading and compression
- Font subsetting
- Bundle analysis and optimization
- Service Worker caching

---

## 🛡️ Security Considerations

### 🔐 Data Security

#### Backend Security
- JWT token expiration and refresh
- API rate limiting
- Input validation and XSS protection
- SQL injection protection

#### Frontend Security
- XSS protection
- CSRF protection
- No sensitive information stored on client
- Secure third-party dependencies

### 🏢 Multi-tenant Isolation

#### Data Isolation
- Team-level data isolation
- API permission verification
- Database row-level security
- Audit log recording

---

## 🚀 Deployment & Operations

### 🐳 Containerized Deployment

#### Docker Configuration
```dockerfile
# Backend Dockerfile
FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . .
CMD ["uvicorn", "server:app", "--host", "0.0.0.0", "--port", "8000"]
```

```dockerfile
# Frontend Dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
RUN npm run build
CMD ["npm", "start"]
```

### 🔍 Monitoring & Logging

#### Structured Logging
```python
import structlog

logger = structlog.get_logger()

logger.info(
    "task_created",
    task_id=task.id,
    team_id=task.team_id,
    user_id=user.id,
    performance_metrics={"duration_ms": 150}
)
```

#### Health Checks
- `/health` - Service health status
- `/health/db` - Database connection status
- `/health/redis` - Redis connection status

---

## 📚 Documentation Maintenance

### 📝 Update Triggers

#### README.md Updates
- New feature additions
- Dependency changes
- Deployment step modifications
- Major API interface changes

#### Architecture Documentation Sync
- **PLANNING.md** - Update when architecture design changes
- **API Documentation** - Sync openapi.json when interface changes
- **Deployment Documentation** - Update when environment configuration changes