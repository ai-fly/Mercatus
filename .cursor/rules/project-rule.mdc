---
alwaysApply: true
---
### 📚 Update Maintenance

**README.md Update Triggers**
- New feature additions
- Dependency changes
- Deployment step modifications
- Major API interface changes

**Architecture Documentation Sync**
- PLANNING.md：Update when architecture design changes
- API Documentation：Sync openapi.json when interface changes
- Deployment Documentation：Update when environment configuration changes

## ⚡ Performance & Optimization

### 🚀 Backend Performance

**Database Optimization**
- Proper index usage
- Query optimization and pagination
- Connection pool configuration
- Read-write separation strategy

**Caching Strategy**
- Redis hot data caching
- Application layer caching
- CDN static resource caching

### 🎯 Frontend Performance

**Code Splitting**
```typescript
// Route-level code splitting
const TasksPage = dynamic(() => import('@/app/tasks/page'), {
  loading: () => <Loading />,
});

// Component-level lazy loading
const HeavyChart = lazy(() => import('@/components/HeavyChart'));
```

**Resource Optimization**
- Image lazy loading and compression
- Font subsetting
- Bundle analysis and optimization
- Service Worker caching

## 🛡️ Security Considerations

### 🔐 Data Security

**Backend Security**
- JWT token expiration and refresh
- API rate limiting
- Input validation and XSS protection
- SQL injection protection

**Frontend Security**
- XSS protection
- CSRF protection
- No sensitive information stored on client
- Secure third-party dependencies

### 🏢 Multi-tenant Isolation

**Data Isolation**
- Team-level data isolation
- API permission verification
- Database row-level security
- Audit log recording

## 🚀 Deployment & Operations

### 🐳 Containerized Deployment

**Docker Configuration**
```dockerfile
# Backend Dockerfile
FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . .
CMD ["uvicorn", "server:app", "--host", "0.0.0.0", "--port", "8000"]
```

```dockerfile
# Frontend Dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
RUN npm run build
CMD ["npm", "start"]
```

### 🔍 Monitoring & Logging

**Structured Logging**
```python
import structlog

logger = structlog.get_logger()

logger.info(
    "task_created",
    task_id=task.id,
    team_id=task.team_id,
    user_id=user.id,
    performance_metrics={"duration_ms": 150}
)
```

**Health Checks**
- `/health`：Service health status
- `/health/db`：Database connection status
- `/health/redis`：Redis connection status

## 🎯 AI Assistant Behavior Guidelines

### 🤖 Development Assistant Rules

- **Mandatory Documentation Reading**：**ALWAYS** start by reading `backend/documents/PLANNING.md` and `web/documents/PLANNING.md` before any work - no exceptions
- **Context Awareness**：Always read relevant documentation first to understand project status
- **No Assumptions**：Ask questions when uncertain, don't fabricate APIs or libraries
- **File Path Confirmation**：Verify file paths exist before referencing them
- **Incremental Development**：Don't delete or overwrite existing code unless explicitly requested
- **Autonomous Task Management**：**MUST** autonomously update `backend/documents/TASK.md` and `web/documents/TASK.md` based on work performed:
  - Mark completed tasks immediately
  - Add newly discovered tasks or requirements
  - Document technical decisions and blockers
  - Track dependencies and optimization opportunities

### 📋 Workflow

1. **Read Planning Documents**：**MANDATORY** - Read both `backend/documents/PLANNING.md` and `web/documents/PLANNING.md` to understand current project architecture and status
2. **Understand Requirements**：Analyze the specific task requirements in context of overall project goals
3. **Plan Implementation**：Design technical solutions and implementation steps aligned with project architecture
4. **Code Implementation**：Follow project standards for development
5. **Test Verification**：Ensure functionality works correctly
6. **Update Task Documentation**：**MANDATORY** - Update `backend/documents/TASK.md` and/or `web/documents/TASK.md` with:
   - Completed task status
   - New discovered tasks or requirements
   - Technical decisions made
   - Dependencies or issues encountered

### 🔧 Technology Choices

**Prioritize Existing Project Tech Stack**
- Backend：FastAPI + SQLAlchemy + PostgreSQL + Redis
- Frontend：Next.js + TypeScript + Tailwind CSS + SWR
- Authentication：Google OAuth + JWT
- Testing：pytest + Jest + React Testing Library

**Dependency Management**
- Python: Specify versions in requirements.txt
- Node.js: Lock versions in package.json
- Evaluate necessity before adding new dependencies 